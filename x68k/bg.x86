#define	BGOUT_BUFFER	(BG_LineBuf)			// 出力バッファぽいんた

#define	BG_DrawLineMcr8(label, bgtop, scrx, scry)					\
			__asm {	mov		edx, scry							}	\
			__asm {	add		edx, VLINEBG							}	\
			__asm {	sub		edx, BG_VLINE							}	\
			__asm {	mov		ebp, edx							}	\
			__asm {	and		ebp, 7								}	\
			__asm {	shl		bp, 3								}	\
			__asm {	and		edx, 01f8h							}	\
			__asm { shl		edx, 4								}	\
			__asm {	add		dx, bgtop							}	\
			__asm {	mov		eax, scrx							}	\
			__asm {	sub		eax, BG_HAdjust							}	\
			__asm {	mov		ecx, eax							}	\
			__asm {	and		eax, 7								}	\
			__asm {	xor		al, 15								}	\
			__asm {	mov		edi, eax		}	\
			__asm {	and		ecx, 01f8h							}	\
			__asm {	shr		cx, 2								}	\
			__asm {	mov		ebx, TextDotX						}	\
			__asm {	shl		ebx, 13								}	\
bg8_##label##_linelp:												\
			__asm {	movzx	esi, word ptr BG[ecx+edx]			}	\
			__asm {	mov		bx, si								}	\
			__asm {	and		si, 0ff00h							}	\
			__asm {	shr		si, 2								}	\
			__asm {	cmp		bl, 40h								}	\
			__asm {	jc		bg8_##label##_flipx					}	\
			__asm {	js		bg8_##label##_fxflipy				}	\
			__asm {	jge		bg8_##label##_fxflipx				}	\
			__asm {	add		esi, offset BGCHR8 + 00000038h		}	\
			__asm {	sub		esi, ebp							}	\
			__asm { jmp		bg8_##label##_flip					}	\
bg8_##label##_fxflipy:												\
			__asm {	add		esi, offset BGCHR8 + 0000003fh		}	\
			__asm {	sub		esi, ebp							}	\
			__asm {	std											}	\
			__asm { jmp		bg8_##label##_out					}	\
bg8_##label##_fxflipx:												\
			__asm {	lea		esi, BGCHR8[esi+ebp+7]				}	\
			__asm {	std											}	\
			__asm { jmp		bg8_##label##_out					}	\
bg8_##label##_flipx:												\
			__asm {	lea		esi, BGCHR8[esi+ebp]				}	\
bg8_##label##_flip:													\
			__asm {	cld											}	\
bg8_##label##_out:													\
			__asm {	mov		bh, 8								}	\
			__asm {	shl		bl, 4								}	\
bg8_##label##_outlp:												\
			__asm {	lodsb										}	\
			__asm {	or		al, bl								}	\
			__asm {	and		ax, 00ffh							}	\
			__asm {	je		bg8_##label##_outed					}	\
			__asm {	test		ax, 000fh							}	\
			__asm {	mov		ax, word ptr TextPal[eax*2]			}	\
			__asm {	jne		bg8_##label##_outcont					}	\
			__asm {	test		byte ptr (Text_TrFlag+1)[edi], 2							}	\
			__asm {	jne		bg8_##label##_outed					}	\
bg8_##label##_outcont:												\
			__asm {	mov		word ptr (BG_LineBuf+2)[edi*2], ax							}	\
			__asm {	or		byte ptr (Text_TrFlag+1)[edi], 2							}	\
bg8_##label##_outed:												\
			__asm {	inc		edi								}	\
			__asm {	dec		bh									}	\
			__asm {	jne		bg8_##label##_outlp					}	\
			__asm {	add		cl, 2								}	\
			__asm {	and		cl, 7fh								}	\
			__asm {	sub		ebx, 10000h							}	\
			__asm { jns		bg8_##label##_linelp				}


#define	BG_DrawLineMcr16(label, bgtop, scrx, scry)					\
			__asm {	mov		edx, scry							}	\
			__asm {	add		edx, VLINEBG							}	\
			__asm {	sub		edx, BG_VLINE							}	\
			__asm {	mov		ebp, edx							}	\
			__asm {	and		ebp, 15								}	\
			__asm {	shl		bp, 4								}	\
			__asm {	and		edx, 03f0h							}	\
			__asm { shl		edx, 3								}	\
			__asm {	add		dx, bgtop							}	\
			__asm {	mov		eax, scrx							}	\
			__asm {	sub		eax, BG_HAdjust							}	\
			__asm {	mov		ecx, eax							}	\
			__asm {	and		eax, 15								}	\
			__asm {	xor		al, 15								}	\
			__asm {	mov		edi, eax		}	\
			__asm {	and		ecx, 03f0h							}	\
			__asm {	shr		cx, 3								}	\
			__asm {	mov		ebx, TextDotX						}	\
			__asm {	shl		ebx, 12								}	\
bg16_##label##_linelp:												\
			__asm {	movzx	esi, word ptr BG[ecx+edx]			}	\
			__asm {	mov		bx, si								}	\
			__asm {	and		si, 0ff00h							}	\
			__asm {	cmp		bl, 40h								}	\
			__asm {	jc		bg16_##label##_flipx				}	\
			__asm {	js		bg16_##label##_fxflipy				}	\
			__asm {	jge		bg16_##label##_fxflipx				}	\
			__asm {	add		esi, offset BGCHR16 + 000000f0h		}	\
			__asm {	sub		esi, ebp							}	\
			__asm { jmp		bg16_##label##_flip					}	\
bg16_##label##_fxflipy:												\
			__asm {	add		esi, offset BGCHR16 + 000000ffh		}	\
			__asm {	sub		esi, ebp							}	\
			__asm {	std											}	\
			__asm { jmp		bg16_##label##_out					}	\
bg16_##label##_fxflipx:												\
			__asm {	lea		esi, BGCHR16[esi+ebp+15]			}	\
			__asm {	std											}	\
			__asm { jmp		bg16_##label##_out					}	\
bg16_##label##_flipx:												\
			__asm {	lea		esi, BGCHR16[esi+ebp]				}	\
bg16_##label##_flip:												\
			__asm {	cld											}	\
bg16_##label##_out:													\
			__asm {	mov		bh, 16								}	\
			__asm {	shl		bl, 4								}	\
bg16_##label##_outlp:												\
			__asm {	lodsb										}	\
			__asm {	or		al, bl								}	\
			__asm {	and		ax, 00ffh							}	\
			__asm {	je		bg16_##label##_outed					}	\
			__asm {	test		ax, 000fh							}	\
			__asm {	mov		ax, word ptr TextPal[eax*2]			}	\
			__asm {	jne		bg16_##label##_outcont					}	\
			__asm {	test		byte ptr (Text_TrFlag+1)[edi], 2							}	\
			__asm {	jne		bg16_##label##_outed					}	\
bg16_##label##_outcont:												\
			__asm {	mov		word ptr (BG_LineBuf+2)[edi*2], ax							}	\
			__asm {	or		byte ptr (Text_TrFlag+1)[edi], 2							}	\
bg16_##label##_outed:												\
			__asm {	inc		edi								}	\
			__asm {	dec		bh									}	\
			__asm {	jne		bg16_##label##_outlp				}	\
			__asm {	add		cl, 2								}	\
			__asm {	and		cl, 7fh								}	\
			__asm {	sub		ebx, 10000h							}	\
			__asm { jns		bg16_##label##_linelp				}



#define	BG_DrawLineMcr8_ng(label, bgtop, scrx, scry)					\
			__asm {	mov		edx, scry							}	\
			__asm {	add		edx, VLINEBG							}	\
			__asm {	sub		edx, BG_VLINE							}	\
			__asm {	mov		ebp, edx							}	\
			__asm {	and		ebp, 7								}	\
			__asm {	shl		bp, 3								}	\
			__asm {	and		edx, 01f8h							}	\
			__asm { shl		edx, 4								}	\
			__asm {	add		dx, bgtop							}	\
			__asm {	mov		eax, scrx							}	\
			__asm {	sub		eax, BG_HAdjust							}	\
			__asm {	mov		ecx, eax							}	\
			__asm {	and		eax, 7								}	\
			__asm {	xor		al, 15								}	\
			__asm {	mov		edi, eax		}	\
			__asm {	and		ecx, 01f8h							}	\
			__asm {	shr		cx, 2								}	\
			__asm {	mov		ebx, TextDotX						}	\
			__asm {	shl		ebx, 13								}	\
bg8_ng_##label##_linelp:												\
			__asm {	movzx	esi, word ptr BG[ecx+edx]			}	\
			__asm {	mov		bx, si								}	\
			__asm {	and		si, 0ff00h							}	\
			__asm {	shr		si, 2								}	\
			__asm {	cmp		bl, 40h								}	\
			__asm {	jc		bg8_ng_##label##_flipx					}	\
			__asm {	js		bg8_ng_##label##_fxflipy				}	\
			__asm {	jge		bg8_ng_##label##_fxflipx				}	\
			__asm {	add		esi, offset BGCHR8 + 00000038h		}	\
			__asm {	sub		esi, ebp							}	\
			__asm { jmp		bg8_ng_##label##_flip					}	\
bg8_ng_##label##_fxflipy:												\
			__asm {	add		esi, offset BGCHR8 + 0000003fh		}	\
			__asm {	sub		esi, ebp							}	\
			__asm {	std											}	\
			__asm { jmp		bg8_ng_##label##_out					}	\
bg8_ng_##label##_fxflipx:												\
			__asm {	lea		esi, BGCHR8[esi+ebp+7]				}	\
			__asm {	std											}	\
			__asm { jmp		bg8_ng_##label##_out					}	\
bg8_ng_##label##_flipx:												\
			__asm {	lea		esi, BGCHR8[esi+ebp]				}	\
bg8_ng_##label##_flip:													\
			__asm {	cld											}	\
bg8_ng_##label##_out:													\
			__asm {	mov		bh, 8								}	\
			__asm {	shl		bl, 4								}	\
bg8_ng_##label##_outlp:												\
			__asm {	lodsb										}	\
			__asm {	and		ax, 000fh							}	\
			__asm {	je		bg8_ng_##label##_outed					}	\
			__asm {	or		al, bl								}	\
			__asm {	mov		ax, word ptr TextPal[eax*2]			}	\
			__asm {	mov		word ptr (BG_LineBuf+2)[edi*2], ax							}	\
			__asm {	or		byte ptr (Text_TrFlag+1)[edi], 2							}	\
bg8_ng_##label##_outed:												\
			__asm {	inc		edi								}	\
			__asm {	dec		bh									}	\
			__asm {	jne		bg8_ng_##label##_outlp					}	\
			__asm {	add		cl, 2								}	\
			__asm {	and		cl, 7fh								}	\
			__asm {	sub		ebx, 10000h							}	\
			__asm { jns		bg8_ng_##label##_linelp				}


#define	BG_DrawLineMcr16_ng(label, bgtop, scrx, scry)					\
			__asm {	mov		edx, scry							}	\
			__asm {	add		edx, VLINEBG							}	\
			__asm {	sub		edx, BG_VLINE							}	\
			__asm {	mov		ebp, edx							}	\
			__asm {	and		ebp, 15								}	\
			__asm {	shl		bp, 4								}	\
			__asm {	and		edx, 03f0h							}	\
			__asm { shl		edx, 3								}	\
			__asm {	add		dx, bgtop							}	\
			__asm {	mov		eax, scrx							}	\
			__asm {	sub		eax, 0/*BG_HAdjust*/							}	\
			__asm {	mov		ecx, eax							}	\
			__asm {	and		eax, 15								}	\
			__asm {	xor		al, 15								}	\
			__asm {	mov		edi, eax		}	\
			__asm {	and		ecx, 03f0h							}	\
			__asm {	shr		cx, 3								}	\
			__asm {	mov		ebx, TextDotX						}	\
			__asm {	shl		ebx, 12								}	\
bg16_ng_##label##_linelp:												\
			__asm {	movzx	esi, word ptr BG[ecx+edx]			}	\
			__asm {	mov		bx, si								}	\
			__asm {	and		si, 0ff00h							}	\
			__asm {	cmp		bl, 40h								}	\
			__asm {	jc		bg16_ng_##label##_flipx				}	\
			__asm {	js		bg16_ng_##label##_fxflipy				}	\
			__asm {	jge		bg16_ng_##label##_fxflipx				}	\
			__asm {	add		esi, offset BGCHR16 + 000000f0h		}	\
			__asm {	sub		esi, ebp							}	\
			__asm { jmp		bg16_ng_##label##_flip					}	\
bg16_ng_##label##_fxflipy:												\
			__asm {	add		esi, offset BGCHR16 + 000000ffh		}	\
			__asm {	sub		esi, ebp							}	\
			__asm {	std											}	\
			__asm { jmp		bg16_ng_##label##_out					}	\
bg16_ng_##label##_fxflipx:												\
			__asm {	lea		esi, BGCHR16[esi+ebp+15]			}	\
			__asm {	std											}	\
			__asm { jmp		bg16_ng_##label##_out					}	\
bg16_ng_##label##_flipx:												\
			__asm {	lea		esi, BGCHR16[esi+ebp]				}	\
bg16_ng_##label##_flip:												\
			__asm {	cld											}	\
bg16_ng_##label##_out:													\
			__asm {	mov		bh, 16								}	\
			__asm {	shl		bl, 4								}	\
bg16_ng_##label##_outlp:												\
			__asm {	lodsb										}	\
			__asm {	and		ax, 000fh							}	\
			__asm {	je		bg16_ng_##label##_outed					}	\
			__asm {	or		al, bl								}	\
			__asm {	mov		ax, word ptr TextPal[eax*2]			}	\
			__asm {	mov		word ptr (BG_LineBuf+2)[edi*2], ax							}	\
			__asm {	or		byte ptr (Text_TrFlag+1)[edi], 2							}	\
bg16_ng_##label##_outed:												\
			__asm {	inc		edi								}	\
			__asm {	dec		bh									}	\
			__asm {	jne		bg16_ng_##label##_outlp				}	\
			__asm {	add		cl, 2								}	\
			__asm {	and		cl, 7fh								}	\
			__asm {	sub		ebx, 10000h							}	\
			__asm { jns		bg16_ng_##label##_linelp				}


struct {
	WORD	sprite_posx;
	WORD	sprite_posy;
	WORD	sprite_ctrl;
	BYTE	sprite_ply;
	BYTE	dummy;
} SPRITECTRLTBL;

#define	Sprite_DrawLineMcr(label, pri)								\
			__asm {	mov		ebp, TextDotX						}	\
			__asm {	add		ebp, 16								}	\
			__asm {	mov		edx, 127*8							}	\
spline_##label##_lp:												\
			__asm {	mov		al, Sprite_Regs[edx].sprite_ply	}	\
			__asm {	and		al, 3	}	\
			__asm {	cmp		al, pri	}	\
			__asm { je		spline_##label##_plyhit				}	\
spline_##label##_lpcnt:												\
			__asm { sub		dx, 8								}	\
			__asm { jns		spline_##label##_lp					}	\
			__asm { jmp		spline_##label##_ed					}	\
spline_##label##_plyhit:											\
			__asm {	movzx	edi, Sprite_Regs[edx].sprite_posx	}	\
			__asm {	add		edi, BG_HAdjust							}	\
			__asm {	and		di, 03ffh							}	\
			__asm {	cmp		edi, ebp							}	\
			__asm {	jnc		spline_##label##_lpcnt				}	\
			__asm {	movzx	eax, Sprite_Regs[edx].sprite_posy	}	\
			__asm {	and		ax, 03ffh							}	\
			__asm {	sub		eax, VLINEBG							}	\
			__asm {	add		eax, BG_VLINE							}	\
			__asm {	neg		eax									}	\
			__asm {	add		eax, 16								}	\
			__asm {	jnc		spline_##label##_lpcnt				}	\
			__asm {	shl		al, 4								}	\
			__asm {	movzx	esi, Sprite_Regs[edx].sprite_ctrl	}	\
			__asm {	mov		bx, si								}	\
			__asm {	shl		si, 8								}	\
			__asm {	cmp		bh, 40h								}	\
			__asm {	jc		spline_##label##_flipx				}	\
			__asm {	js		spline_##label##_fxflipy			}	\
			__asm {	jge		spline_##label##_fxflipx			}	\
			__asm {	xor		al, 0f0h							}	\
spline_##label##_flipx:												\
			__asm {	lea		esi, BGCHR16[esi + eax]				}	\
			__asm { cld											}	\
spline_##label##_out:												\
			__asm {	shl		bh, 4								}	\
			__asm {	mov		ecx, 16								}	\
spline_##label##_outlp:												\
			__asm {	lodsb										}	\
			__asm {	and		ax, 000fh							}	\
			__asm {	je		spline_##label##_trans				}	\
			__asm {	or		al, bh								}	\
			__asm {	cmp		word ptr BG_PriBuf[edi*2], dx								}	\
			__asm {	jc		spline_##label##_trans				}	\
			__asm {	mov		ax, word ptr TextPal[eax*2]			}	\
			__asm {	mov		word ptr BG_LineBuf[edi*2], ax							}	\
			__asm {	or		byte ptr (Text_TrFlag)[edi], 2							}	\
			__asm {	mov		word ptr BG_PriBuf[edi*2], dx							}	\
spline_##label##_trans:												\
			__asm {	inc		edi								}	\
			__asm { loop	spline_##label##_outlp				}	\
			__asm {	jmp		spline_##label##_lpcnt				}	\
spline_##label##_fxflipy:											\
			__asm {	xor		al, 0f0h							}	\
spline_##label##_fxflipx:											\
			__asm {	lea		esi, BGCHR16[esi + eax + 15]		}	\
			__asm {	std											}	\
			__asm { jmp		spline_##label##_out				}	\
spline_##label##_ed:
